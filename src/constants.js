"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FAILED_MINIMUM_DEMO_TAPS_MESSAGE = exports.LIKERT_PREAMBLE = exports.PREMATURE_KEY_RELEASE_ERROR_MESSAGE = exports.VALIDATION_DIRECTIONS = exports.CALIBRATION_FINISHED_DIRECTIONS = exports.CALIBRATION_PART_2_ENDING_MESSAGE = exports.TRIAL_BLOCKS_DIRECTIONS = exports.CALIBRATION_PART_2_DIRECTIONS = exports.CALIBRATION_PART_1_ENDING_MESSAGE = exports.ADDITIONAL_CALIBRATION_PART_1_DIRECTIONS = exports.CALIBRATION_PART_1_DIRECTIONS = exports.FAILED_VALIDATION_MESSAGE = exports.PASSED_VALIDATION_MESSAGE = exports.KEYBOARD_LAYOUT = exports.KEY_TAPPED_EARLY_ERROR_TIME = exports.PREMATURE_KEY_RELEASE_ERROR_TIME = exports.COUNTDOWN_TIME = exports.SUCCESS_SCREEN_DURATION = exports.GO_DURATION = exports.PARAMETER_COMBINATIONS_TOTAL = exports.PARAMETER_COMBINATIONS = exports.TRIAL_DURATION = exports.NUM_TRIALS = exports.FAILED_MINIMUM_DEMO_TAPS_DURATION = exports.MINIMUM_DEMO_TAPS = exports.NUM_DEMO_TRIALS = exports.NUM_EXTRA_VALIDATION_TRIALS = exports.NUM_VALIDATION_TRIALS = exports.EXPECTED_MAXIMUM_PERCENTAGE_FOR_CALIBRATION = exports.MINIMUM_CALIBRATION_MEDIAN = exports.NUM_CALIBRATION_TRIALS = exports.NUM_CALIBRATION_WITH_FEEDBACK_TRIALS = exports.NUM_CALIBRATION_WITHOUT_FEEDBACK_TRIALS = exports.BOUND_OPTIONS = exports.HARD_BOUNDS = exports.MEDIUM_BOUNDS = exports.EASY_BOUNDS = exports.REWARD_OPTIONS = exports.HIGH_REWARDS = exports.MEDIUM_REWARDS = exports.LOW_REWARDS = exports.KEY_TO_PRESS = exports.KEYS_TO_HOLD = exports.EXPECTED_MAXIMUM_PERCENTAGE = exports.MAXIMUM_THERMOMETER_HEIGHT = exports.AUTO_INCREASE_AMOUNT = exports.AUTO_DECREASE_RATE = exports.AUTO_DECREASE_AMOUNT = exports.LOADING_BAR_SPEED_YES = exports.LOADING_BAR_SPEED_NO = void 0;
exports.LIKERT_SURVEY_2_QUESTIONS = exports.LIKERT_SURVEY_1_QUESTIONS = exports.LIKERT_RESPONSES = exports.REWARD_TRIAL_MESSAGE = exports.COUNTDOWN_TIMER_MESSAGE = exports.CONTINUE_BUTTON_MESSAGE = exports.LOADING_BAR_MESSAGE = exports.GO_MESSAGE = exports.TRIAL_SUCCEEDED = exports.TRIAL_FAILED = exports.DOMINANT_HAND_MESSAGE = exports.ACCEPTANCE_TRIAL_MESSAGE = exports.DEMO_TRIAL_MESSAGE = exports.COUNTDOWN_DIRECTIONS = exports.INTERACTIVE_KEYBOARD_TUTORIAL_MESSAGE = exports.VALIDATION_VIDEO_TUTORIAL_MESSAGE = exports.STIMULI_VIDEO_TUTORIAL_MESSAGE = exports.NO_STIMULI_VIDEO_TUTORIAL_MESSAGE = exports.TUTORIAL_MESSAGE_1 = exports.REWARD_TOTAL_MESSAGE = exports.RELEASE_KEYS_MESSAGE = exports.KEY_TAPPED_EARLY_MESSAGE = exports.HOLD_KEYS_MESSAGE = void 0;
const fast_cartesian_1 = __importDefault(require("fast-cartesian"));
const i18n_1 = __importDefault(require("./i18n"));
exports.LOADING_BAR_SPEED_NO = 50;
exports.LOADING_BAR_SPEED_YES = 5;
exports.AUTO_DECREASE_AMOUNT = 2;
exports.AUTO_DECREASE_RATE = 100;
exports.AUTO_INCREASE_AMOUNT = 10;
exports.MAXIMUM_THERMOMETER_HEIGHT = 100;
exports.EXPECTED_MAXIMUM_PERCENTAGE = 100;
exports.KEYS_TO_HOLD = ['a', 'w', 'e'];
exports.KEY_TO_PRESS = 'r';
exports.LOW_REWARDS = [0.01, 0.02, 0.03];
exports.MEDIUM_REWARDS = [0.08, 0.09, 0.1, 0.11, 0.12];
exports.HIGH_REWARDS = [0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23];
exports.REWARD_OPTIONS = [exports.LOW_REWARDS, exports.MEDIUM_REWARDS, exports.HIGH_REWARDS];
exports.EASY_BOUNDS = [30, 50];
exports.MEDIUM_BOUNDS = [50, 70];
exports.HARD_BOUNDS = [70, 90];
exports.BOUND_OPTIONS = [exports.EASY_BOUNDS, exports.MEDIUM_BOUNDS, exports.HARD_BOUNDS];
exports.NUM_CALIBRATION_WITHOUT_FEEDBACK_TRIALS = 1;
exports.NUM_CALIBRATION_WITH_FEEDBACK_TRIALS = 1;
exports.NUM_CALIBRATION_TRIALS = exports.NUM_CALIBRATION_WITHOUT_FEEDBACK_TRIALS +
    exports.NUM_CALIBRATION_WITH_FEEDBACK_TRIALS;
exports.MINIMUM_CALIBRATION_MEDIAN = 10;
exports.EXPECTED_MAXIMUM_PERCENTAGE_FOR_CALIBRATION = 50;
exports.NUM_VALIDATION_TRIALS = 1;
exports.NUM_EXTRA_VALIDATION_TRIALS = 3;
exports.NUM_DEMO_TRIALS = 1;
exports.MINIMUM_DEMO_TAPS = 4;
exports.FAILED_MINIMUM_DEMO_TAPS_DURATION = 1000;
exports.NUM_TRIALS = 63;
exports.TRIAL_DURATION = 5000;
exports.PARAMETER_COMBINATIONS = (0, fast_cartesian_1.default)([
    exports.REWARD_OPTIONS,
    exports.BOUND_OPTIONS,
]).map(([reward, bounds]) => ({
    reward,
    bounds,
}));
exports.PARAMETER_COMBINATIONS_TOTAL = Math.floor(exports.NUM_TRIALS / exports.PARAMETER_COMBINATIONS.length);
exports.GO_DURATION = 500;
exports.SUCCESS_SCREEN_DURATION = 500;
exports.COUNTDOWN_TIME = 3;
exports.PREMATURE_KEY_RELEASE_ERROR_TIME = 1000;
exports.KEY_TAPPED_EARLY_ERROR_TIME = 3000;
exports.KEYBOARD_LAYOUT = '';
// Messages
exports.PASSED_VALIDATION_MESSAGE = i18n_1.default.t('PASSED_VALIDATION_MESSAGE');
exports.FAILED_VALIDATION_MESSAGE = i18n_1.default.t('FAILED_VALIDATION_MESSAGE');
exports.CALIBRATION_PART_1_DIRECTIONS = i18n_1.default.t('CALIBRATION_PART_1_DIRECTIONS', {
    KEYS_TO_HOLD_0: exports.KEYS_TO_HOLD[0].toUpperCase(),
    KEYS_TO_HOLD_1: exports.KEYS_TO_HOLD[1].toUpperCase(),
    KEYS_TO_HOLD_2: exports.KEYS_TO_HOLD[2].toUpperCase(),
    KEY_TO_PRESS: exports.KEY_TO_PRESS.toUpperCase(),
});
exports.ADDITIONAL_CALIBRATION_PART_1_DIRECTIONS = i18n_1.default.t('ADDITIONAL_CALIBRATION_PART_1_DIRECTIONS', {
    KEYS_TO_HOLD_0: exports.KEYS_TO_HOLD[0].toUpperCase(),
    KEYS_TO_HOLD_1: exports.KEYS_TO_HOLD[1].toUpperCase(),
    KEYS_TO_HOLD_2: exports.KEYS_TO_HOLD[2].toUpperCase(),
    KEY_TO_PRESS: exports.KEY_TO_PRESS.toUpperCase(),
});
exports.CALIBRATION_PART_1_ENDING_MESSAGE = i18n_1.default.t('CALIBRATION_PART_1_ENDING_MESSAGE');
exports.CALIBRATION_PART_2_DIRECTIONS = i18n_1.default.t('CALIBRATION_PART_2_DIRECTIONS');
exports.TRIAL_BLOCKS_DIRECTIONS = i18n_1.default.t('TRIAL_BLOCKS_DIRECTIONS');
exports.CALIBRATION_PART_2_ENDING_MESSAGE = i18n_1.default.t('CALIBRATION_PART_2_ENDING_MESSAGE');
exports.CALIBRATION_FINISHED_DIRECTIONS = i18n_1.default.t('CALIBRATION_FINISHED_DIRECTIONS');
exports.VALIDATION_DIRECTIONS = i18n_1.default.t('VALIDATION_DIRECTIONS');
exports.PREMATURE_KEY_RELEASE_ERROR_MESSAGE = i18n_1.default.t('PREMATURE_KEY_RELEASE_ERROR_MESSAGE');
exports.LIKERT_PREAMBLE = i18n_1.default.t('LIKERT_PREAMBLE');
exports.FAILED_MINIMUM_DEMO_TAPS_MESSAGE = i18n_1.default.t('FAILED_MINIMUM_DEMO_TAPS_MESSAGE');
exports.HOLD_KEYS_MESSAGE = i18n_1.default.t('HOLD_KEYS_MESSAGE', {
    KEYS_TO_HOLD_0: exports.KEYS_TO_HOLD[0].toUpperCase(),
    KEYS_TO_HOLD_1: exports.KEYS_TO_HOLD[1].toUpperCase(),
    KEYS_TO_HOLD_2: exports.KEYS_TO_HOLD[2].toUpperCase()
});
exports.KEY_TAPPED_EARLY_MESSAGE = i18n_1.default.t('KEY_TAPPED_EARLY_MESSAGE');
exports.RELEASE_KEYS_MESSAGE = i18n_1.default.t('RELEASE_KEYS_MESSAGE');
const REWARD_TOTAL_MESSAGE = (totalSuccessfulReward) => i18n_1.default.t('REWARD_TOTAL_MESSAGE', { totalSuccessfulReward });
exports.REWARD_TOTAL_MESSAGE = REWARD_TOTAL_MESSAGE;
exports.TUTORIAL_MESSAGE_1 = i18n_1.default.t('TUTORIAL_MESSAGE_1');
exports.NO_STIMULI_VIDEO_TUTORIAL_MESSAGE = i18n_1.default.t('NO_STIMULI_VIDEO_TUTORIAL_MESSAGE', {
    KEYS_TO_HOLD_0: exports.KEYS_TO_HOLD[0].toUpperCase(),
    KEYS_TO_HOLD_1: exports.KEYS_TO_HOLD[1].toUpperCase(),
    KEYS_TO_HOLD_2: exports.KEYS_TO_HOLD[2].toUpperCase(),
    KEY_TO_PRESS: exports.KEY_TO_PRESS.toUpperCase(),
});
exports.STIMULI_VIDEO_TUTORIAL_MESSAGE = i18n_1.default.t('STIMULI_VIDEO_TUTORIAL_MESSAGE', {
    KEY_TO_PRESS: exports.KEY_TO_PRESS.toUpperCase(),
});
exports.VALIDATION_VIDEO_TUTORIAL_MESSAGE = i18n_1.default.t('VALIDATION_VIDEO_TUTORIAL_MESSAGE', {
    KEY_TO_PRESS: exports.KEY_TO_PRESS.toUpperCase(),
});
exports.INTERACTIVE_KEYBOARD_TUTORIAL_MESSAGE = i18n_1.default.t('INTERACTIVE_KEYBOARD_TUTORIAL_MESSAGE', {
    KEYS_TO_HOLD_0: exports.KEYS_TO_HOLD[0].toUpperCase(),
    KEYS_TO_HOLD_1: exports.KEYS_TO_HOLD[1].toUpperCase(),
    KEYS_TO_HOLD_2: exports.KEYS_TO_HOLD[2].toUpperCase(),
    KEY_TO_PRESS: exports.KEY_TO_PRESS.toUpperCase(),
});
exports.COUNTDOWN_DIRECTIONS = i18n_1.default.t('COUNTDOWN_DIRECTIONS', {
    KEY_TO_PRESS: exports.KEY_TO_PRESS.toUpperCase(),
});
exports.DEMO_TRIAL_MESSAGE = i18n_1.default.t('DEMO_TRIAL_MESSAGE');
exports.ACCEPTANCE_TRIAL_MESSAGE = i18n_1.default.t('ACCEPTANCE_TRIAL_MESSAGE');
exports.DOMINANT_HAND_MESSAGE = i18n_1.default.t('DOMINANT_HAND_MESSAGE');
exports.TRIAL_FAILED = i18n_1.default.t('TRIAL_FAILED');
exports.TRIAL_SUCCEEDED = i18n_1.default.t('TRIAL_SUCCEEDED');
exports.GO_MESSAGE = i18n_1.default.t('GO_MESSAGE');
exports.LOADING_BAR_MESSAGE = i18n_1.default.t('LOADING_BAR_MESSAGE');
exports.CONTINUE_BUTTON_MESSAGE = i18n_1.default.t('CONTINUE_BUTTON_MESSAGE');
exports.COUNTDOWN_TIMER_MESSAGE = i18n_1.default.t('COUNTDOWN_TIMER_MESSAGE');
exports.REWARD_TRIAL_MESSAGE = i18n_1.default.t('REWARD_TRIAL_MESSAGE');
exports.LIKERT_RESPONSES = {
    STRONGLY_DISAGREE: i18n_1.default.t('LIKERT_RESPONSES.STRONGLY_DISAGREE'),
    DISAGREE: i18n_1.default.t('LIKERT_RESPONSES.DISAGREE'),
    NEUTRAL: i18n_1.default.t('LIKERT_RESPONSES.NEUTRAL'),
    AGREE: i18n_1.default.t('LIKERT_RESPONSES.AGREE'),
    STRONGLY_AGREE: i18n_1.default.t('LIKERT_RESPONSES.STRONGLY_AGREE')
};
exports.LIKERT_SURVEY_1_QUESTIONS = {
    QUESTION_1: i18n_1.default.t('LIKERT_SURVEY_1_QUESTIONS.QUESTION_1'),
    QUESTION_2: i18n_1.default.t('LIKERT_SURVEY_1_QUESTIONS.QUESTION_2'),
    QUESTION_3: i18n_1.default.t('LIKERT_SURVEY_1_QUESTIONS.QUESTION_3')
};
exports.LIKERT_SURVEY_2_QUESTIONS = {
    QUESTION_1: i18n_1.default.t('LIKERT_SURVEY_2_QUESTIONS.QUESTION_1'),
    QUESTION_2: i18n_1.default.t('LIKERT_SURVEY_2_QUESTIONS.QUESTION_2'),
    QUESTION_3: i18n_1.default.t('LIKERT_SURVEY_2_QUESTIONS.QUESTION_3'),
    QUESTION_4: i18n_1.default.t('LIKERT_SURVEY_2_QUESTIONS.QUESTION_4'),
    QUESTION_5: i18n_1.default.t('LIKERT_SURVEY_2_QUESTIONS.QUESTION_5')
};
